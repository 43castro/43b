---
import { getCollection } from "astro:content";
import Main from '../layouts/Main.astro'
import ArticleCard from '../components/ArticleCard.astro'
import ExperimentCard from "../components/ExperimentCard.astro";
const allPosts = await getCollection("blog");
const allExperiments = await getCollection("experiments");
---

<Main title="castro">
    <body class="text-white">
        <div class="text-center flex justify-center text-2xl font-semibold mt-20 element animated-text"><svg class="logo" width="40px" height="40px" viewBox="0 0 512 512" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
        <g clip-path="url(#_clip1)">
        <g transform="matrix(1.3568,0,0,1.3568,-401.706,-1020.24)">
            <g>
                <g transform="matrix(1,0,0,1,-378.36,190.932)">
                    <path d="M741.7,616.6C739.864,605.128 745.492,593.751 755.725,588.249C791.059,570.009 875.724,536.917 956.594,587.149C965.341,592.585 970.27,602.492 969.331,612.747C965.288,657.694 953.585,785.457 949.851,826.22C949.217,833.144 954.256,839.295 961.169,840.036C970.739,840.96 982.108,842.203 987.552,843.344C1003.27,846.637 1014.65,849.691 1021.42,860.359C1037.67,885.977 1030.39,941.417 961.963,938.058C961.378,938.028 960.794,937.973 960.214,937.891C954.199,936.908 914.594,929.272 868.039,891.831C868.039,891.831 824.978,858.707 791.542,847.635C783.201,844.903 777.087,837.738 775.7,829.071C768.782,785.867 749.18,663.352 741.7,616.6Z" style="fill:white;"/>
                </g>
                <g transform="matrix(1,0,0,1,-378.36,201.728)">
                    <path d="M843.243,900.762C844.157,900.816 845.003,900.28 845.344,899.431C845.686,898.582 845.446,897.609 844.749,897.016C827.414,882.747 759.384,837.668 712.16,860.53C693.138,869.738 692.804,902.249 710.162,923.898C716.007,931.187 727.133,930.055 774.997,910.408C794.574,902.373 811.156,898.569 843.243,900.762Z" style="fill:white;"/>
                </g>
            </g>
        </g>
        </g>
        </svg></div>
        <div class="container">
            <div class="tabs relative">
                <!-- Tab Menu -->
                <input type="radio" name="tab" id="tab-1" checked class="tab-switch hidden">
                <label for="tab-1" class="tab-label ml-4">Guías</label>

                <input type="radio" name="tab" id="tab-2" class="tab-switch hidden">
                <label for="tab-2" class="tab-label ml-10">Experimentos</label>

                <!-- Guías Content -->
                <div class="tab-content">
                    <!-- Content for Guías -->
                    <div class="article-cards">
                        <!-- Example Article Card -->
                        {allPosts.map((p) => <ArticleCard blog={p}/>)}
                    </div>
                </div>

                <!-- Experimentos Content -->
                <div class="tab-content">
                    <!-- Content for Experimentos -->
                    <div class="experiment-cards">
                        {allExperiments.map((p) => <ExperimentCard experiments={p}/>)}
                    </div>
                </div>
            </div>
        </div>
    </body>
</Main>

<style>
    .container {
        margin-top: 3em;
        gap: 5em; /* Adjusted gap for better spacing */
    }

    .tabs {
        position: relative;
    }

    .tab-label {
        font-size: 21px;
        display: inline-block;
        margin-bottom: 30px;
        margin-top: 10px;
        cursor: pointer;
        opacity: 0.3; /* Default opacity for inactive tabs */
        position: relative; /* Required for the ::after pseudo-element */
        transition: opacity 0.25s ease;
        user-select: none; /* Prevent text selection */
        font-weight: 600;
    }

    .tab-label::after {
        content: "";
        position: absolute;
        bottom: -5px; /* Position just below the text */
        left: 0;
        width: 0; /* Hidden by default */
        height: 2px; /* Thickness of the underline */
        background-color: currentColor; /* Matches the text color */
        transition: width 0.3s ease;
    }

    .tab-label:hover::after {
        width: 100%; /* Expand the underline on hover */
    }

    /* Active tab opacity and underline */
    .tab-switch:checked + .tab-label {
        opacity: 1; /* Full opacity for the active tab */
    }

    .tab-switch:checked + .tab-label::after {
        width: 100%; /* Keep the underline visible for the active tab */
    }

    .tab-content {
        display: none; /* Hide all content by default */
        width: 100%;
        margin-top: 1em;
        border-radius: 8px;
        color: #fff;
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
        animation: fadeInUp 0.5s ease-in-out;
    }

    #tab-2{
      margin-left: 10px;
    }

    /* Show content for the selected tab */
    #tab-1:checked ~ .tab-content:nth-of-type(1),
    #tab-2:checked ~ .tab-content:nth-of-type(2) {
        display: block; /* Show corresponding content */
        opacity: 1; /* Make it visible */
        transition: opacity 0.5s ease-in-out;
    }


    /* Initial state: invisible and slightly scaled down */
.animate-appearance {
  opacity: 0;
  transform: scale(0.95);
  transition: opacity 1s ease, transform 1s ease;
}

/* When the element becomes visible */
.animate-appearance.visible {
  opacity: 1;
  transform: scale(1);
}

/* To trigger the animation on scroll */
@keyframes fadeInUp {
  0% {
    opacity: 0;
    transform: translateY(20px);
    filter: blur(5px); /* Initial blur */
  }
  100% {
    opacity: 1;
    transform: translateY(0);
    filter: blur(0); /* No blur at the end */
  }
}

.element {
        animation: fadeInUp 0.8s ease-in-out;
}
   </style>
