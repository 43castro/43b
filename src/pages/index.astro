---
import { getCollection } from "astro:content";
import Main from '../layouts/Main.astro'
import ArticleCard from '../components/ArticleCard.astro'
import ExperimentCard from "../components/ExperimentCard.astro";
const allPosts = await getCollection("blog");
const allExperiments = await getCollection("experiments");
---

<Main title="castro">
    <body class="text-white">
        <div class="text-center flex justify-center text-2xl font-semibold mt-20 element animated-text">[ ]</div>
        <div class="container">
            <div class="tabs relative text-center">
                <!-- Tab Menu -->
                <input type="radio" name="tab" id="tab-1" checked class="tab-switch hidden">
                <label for="tab-1" class="tab-label">Guías</label>

                <input type="radio" name="tab" id="tab-2" class="tab-switch hidden">
                <label for="tab-2" class="tab-label">Experimentos</label>

                <!-- Guías Content -->
                <div class="tab-content">
                    <!-- Content for Guías -->
                    <div class="article-cards">
                        <!-- Example Article Card -->
                        {allPosts.map((p) => <ArticleCard blog={p}/>)}
                    </div>
                </div>

                <!-- Experimentos Content -->
                <div class="tab-content">
                    <!-- Content for Experimentos -->
                    <div class="experiment-cards">
                        {allExperiments.map((p) => <ExperimentCard experiments={p}/>)}
                    </div>
                </div>
            </div>
        </div>
    </body>
</Main>

<style>
    .container {
        margin-top: 3em;
        gap: 5em; /* Adjusted gap for better spacing */
    }

    .tabs {
        position: relative;
    }

    .tab-label {
        font-size: 21px;
        display: inline-block;
        margin-left: 8px;
        margin-right: 40px;
        margin-bottom: 30px;
        margin-top: 10px;
        cursor: pointer;
        opacity: 0.3; /* Default opacity for inactive tabs */
        position: relative; /* Required for the ::after pseudo-element */
        transition: opacity 0.25s ease;
        user-select: none; /* Prevent text selection */
        font-weight: 600;
    }

    .tab-label::after {
        content: "";
        position: absolute;
        bottom: -5px; /* Position just below the text */
        left: 0;
        width: 0; /* Hidden by default */
        height: 2px; /* Thickness of the underline */
        background-color: currentColor; /* Matches the text color */
        transition: width 0.3s ease;
    }

    .tab-label:hover::after {
        width: 100%; /* Expand the underline on hover */
    }

    /* Active tab opacity and underline */
    .tab-switch:checked + .tab-label {
        opacity: 1; /* Full opacity for the active tab */
    }

    .tab-switch:checked + .tab-label::after {
        width: 100%; /* Keep the underline visible for the active tab */
    }

    .tab-content {
        display: none; /* Hide all content by default */
        width: 100%;
        margin-top: 1em;
        border-radius: 8px;
        color: #fff;
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
        animation: fadeInUp 0.5s ease-in-out;
    }


    /* Show content for the selected tab */
    #tab-1:checked ~ .tab-content:nth-of-type(1),
    #tab-2:checked ~ .tab-content:nth-of-type(2) {
        display: block; /* Show corresponding content */
        opacity: 1; /* Make it visible */
        transition: opacity 0.5s ease-in-out;
    }

    /* Optional: Basic styles for article cards */
    .article-card, .experiment-card {
        margin: 0.5rem 0;
    }

    /* Initial state: invisible and slightly scaled down */
.animate-appearance {
  opacity: 0;
  transform: scale(0.95);
  transition: opacity 1s ease, transform 1s ease;
}

/* When the element becomes visible */
.animate-appearance.visible {
  opacity: 1;
  transform: scale(1);
}

/* To trigger the animation on scroll */
@keyframes fadeInUp {
  0% {
    opacity: 0;
    transform: translateY(20px);
    filter: blur(5px); /* Initial blur */
  }
  100% {
    opacity: 1;
    transform: translateY(0);
    filter: blur(0); /* No blur at the end */
  }
}

.element {
        animation: fadeInUp 0.8s ease-in-out;
}
   </style>
